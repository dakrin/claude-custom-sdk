#!/usr/bin/env python3
"""
Claude SDK - A flexible command-line interface for Claude
"""
import subprocess
import sys
import os
import json
import argparse
from datetime import datetime
from typing import List, Optional

DEFAULT_TOOLS = ["Bash", "Read", "Write", "Edit", "Task", "Grep", "Glob"]
DEFAULT_SYSTEM_PROMPT_TEXT = "**IMPORTANT**: After completing your analysis, save your full recommendations to a file named 'output.txt' using the Write tool."
DEFAULT_SYSTEM_PROMPT_JSON = "**IMPORTANT**: After completing your analysis, save your results as valid JSON to a file named 'output.json' using the Write tool. The JSON should contain your complete response with appropriate structure."

# TODO: Future enhancements
# - Implement stdin support: --prompt - to read from pipe
# - Add --continue and --resume functionality  
# - Support Claude's advanced tool syntax like "Bash(git:*)"
# - Add session management commands (--list-sessions, --cleanup)

def get_system_prompt(args):
    """Get system prompt based on hierarchy: CLI flag > file > default"""
    # 1. CLI flag takes highest priority
    if args.system_prompt:
        return "\n\n" + args.system_prompt
    
    # 2. Check for user-created system-prompt.txt
    system_prompt_file = os.path.join(".claude-sdk", "system-prompt.txt")
    if os.path.exists(system_prompt_file):
        try:
            with open(system_prompt_file, 'r') as f:
                content = f.read().strip()
                if content:
                    return "\n\n" + content
        except Exception:
            pass
    
    # 3. Use default based on output format
    default_prompt = DEFAULT_SYSTEM_PROMPT_TEXT if args.output_format == "text" else DEFAULT_SYSTEM_PROMPT_JSON
    return "\n\n" + default_prompt

def save_system_prompt(output_dir: str, system_prompt: str):
    """Save the system prompt used for this session"""
    try:
        prompt_path = os.path.join(output_dir, "system-prompt.txt")
        with open(prompt_path, 'w') as f:
            f.write(system_prompt.strip())
    except Exception:
        pass  # Not critical if this fails

def save_full_prompt(output_dir: str, full_prompt: str):
    """Save the full prompt (including system prompt) for this session"""
    try:
        prompt_path = os.path.join(output_dir, "prompt.txt")
        with open(prompt_path, 'w') as f:
            f.write(full_prompt)
    except Exception:
        pass  # Not critical if this fails

def handle_simple_mode():
    """Handle simple passthrough mode"""
    # Remove the script name and --simple flag
    claude_args = sys.argv[2:]
    
    # Always add -p for non-interactive mode in simple mode
    cmd = ["claude", "-p"] + claude_args
    
    try:
        # Direct passthrough to Claude
        process = subprocess.run(cmd)
        sys.exit(process.returncode)
    except KeyboardInterrupt:
        sys.exit(130)
    except Exception as e:
        print(f"Error running Claude: {e}", file=sys.stderr)
        sys.exit(1)

def parse_arguments():
    """Parse command-line arguments"""
    parser = argparse.ArgumentParser(
        description="Claude SDK - Call Claude with flexible parameters",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    # Input/Output options
    parser.add_argument(
        "-p", "--prompt-file",
        default="prompt.txt",
        help="Path to prompt file (default: prompt.txt)"
    )
    parser.add_argument(
        "--prompt",
        help="Direct prompt string (overrides prompt-file)"
    )
    parser.add_argument(
        "--return-output",
        action="store_true",
        help="Stream the output.txt content to stdout when complete"
    )
    parser.add_argument(
        "--session-name",
        help="Add a name to the session directory (e.g., feature_x)"
    )
    parser.add_argument(
        "-o", "--output",
        help="Write output file to specified location"
    )
    parser.add_argument(
        "--output-format",
        choices=["text", "json"],
        default="text",
        help="Output format: text or json (default: text)"
    )
    parser.add_argument(
        "--system-prompt",
        help="Override system prompt for this run"
    )
    
    # Claude options
    parser.add_argument(
        "-m", "--model",
        help="Claude model to use (e.g., opus, sonnet)"
    )
    parser.add_argument(
        "-t", "--tools",
        nargs="+",
        help=f"Tools to allow (default: {', '.join(DEFAULT_TOOLS)})"
    )
    parser.add_argument(
        "--all-tools",
        action="store_true",
        help="Allow all available tools"
    )
    
    # Behavior options
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="Enable verbose output"
    )
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="Show command without executing"
    )
    parser.add_argument(
        "--no-stream",
        action="store_true",
        help="Don't stream output to console"
    )
    
    return parser.parse_args()

def read_prompt(args) -> tuple[str, str]:
    """Read prompt from file or argument and append output instruction"""
    base_prompt = ""
    if args.prompt:
        base_prompt = args.prompt
    else:
        try:
            with open(args.prompt_file, 'r') as f:
                base_prompt = f.read().strip()
        except FileNotFoundError:
            print(f"Error: Prompt file '{args.prompt_file}' not found")
            sys.exit(1)
        except Exception as e:
            print(f"Error reading prompt file: {e}")
            sys.exit(1)
    
    # Always append system prompt
    system_prompt = get_system_prompt(args)
    return base_prompt + system_prompt, system_prompt

def get_output_directory(args) -> tuple[str, str]:
    """Determine output directory and file path"""
    # Always use .claude-sdk directory with timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    if args.session_name:
        session_dir = f"{timestamp}_{args.session_name}"
    else:
        session_dir = timestamp
    
    output_dir = os.path.join(".claude-sdk", session_dir)
    return output_dir, "conversation.json"

def build_claude_command(prompt: str, args) -> List[str]:
    """Build the Claude command with all parameters"""
    # Always use stream-json with verbose for session tracking
    cmd = ["claude", "-p", "--output-format", "stream-json", "--verbose"]
    
    if args.model:
        cmd.extend(["--model", args.model])
    
    # Handle tools
    if args.all_tools:
        # Claude CLI might have a flag for all tools, adjust as needed
        pass
    else:
        tools = args.tools if args.tools else DEFAULT_TOOLS.copy()
        
        # Ensure Write tool is included for output.txt
        if not args.output and "Write" not in tools:
            tools.append("Write")
        
        for tool in tools:
            cmd.extend(["--allowedTools", tool])
    
    return cmd

def read_output_file(output_dir: str, output_format: str = "text") -> Optional[str]:
    """Read output.txt or output.json if it exists"""
    output_filename = "output.txt" if output_format == "text" else "output.json"
    output_path = os.path.join(output_dir, output_filename)
    
    if os.path.exists(output_path):
        try:
            with open(output_path, 'r') as f:
                return f.read()
        except Exception as e:
            print(f"Warning: Could not read {output_filename}: {e}", file=sys.stderr)
    
    return None

def run_claude(cmd: List[str], prompt: str, system_prompt: str, output_dir: str, output_file: str, args) -> int:
    """Execute Claude command and handle output"""
    
    if args.dry_run:
        print(f"Command: echo '<prompt>' | {' '.join(cmd)}")
        print(f"Prompt length: {len(prompt)} characters")
        return 0
    
    os.makedirs(output_dir, exist_ok=True)
    print(f"Session: {output_dir}", file=sys.stderr)
    
    # Save system prompt for this session
    save_system_prompt(output_dir, system_prompt)
    
    # Save full prompt for this session
    save_full_prompt(output_dir, prompt)
    
    original_dir = os.getcwd()
    os.chdir(output_dir)
    
    try:
        output_path = output_file
        if args.verbose:
            print(f"Command: {' '.join(cmd)}", file=sys.stderr)
        
        with open(output_path, "w") as outfile:
            process = subprocess.Popen(
                cmd,
                stdin=subprocess.PIPE,
                stdout=outfile,
                stderr=subprocess.PIPE if not args.no_stream else subprocess.DEVNULL,
                text=True
            )
            
            # Send prompt via stdin
            process.stdin.write(prompt)
            process.stdin.close()
            
            if not args.no_stream:
                for line in process.stderr:
                    print(line, end='', file=sys.stderr)
            
            return_code = process.wait()
            
            if return_code != 0:
                print(f"Claude exited with status {return_code}", file=sys.stderr)
            
    except KeyboardInterrupt:
        print("\nInterrupted by user", file=sys.stderr)
        process.terminate()
        process.wait()
        return_code = 130
    except Exception as e:
        print(f"Error running Claude: {e}", file=sys.stderr)
        return_code = 1
    finally:
        os.chdir(original_dir)
    
    # Handle output file after Claude completes successfully
    if return_code == 0:
        output_content = read_output_file(output_dir, args.output_format)
        output_filename = "output.txt" if args.output_format == "text" else "output.json"
        
        if args.return_output:
            # Stream to stdout
            if output_content:
                print(output_content, end='')
            else:
                print(f"Note: {output_filename} was not created (Most likely due to system prompt change)", file=sys.stderr)
        elif args.output:
            # Write to specified file
            if output_content:
                try:
                    output_path = args.output
                    os.makedirs(os.path.dirname(output_path) or ".", exist_ok=True)
                    with open(output_path, 'w') as f:
                        f.write(output_content)
                    print(f"Output written to: {output_path}", file=sys.stderr)
                except Exception as e:
                    print(f"Error writing to {output_path}: {e}", file=sys.stderr)
            else:
                print(f"Note: {output_filename} was not created (Most likely due to system prompt change)", file=sys.stderr)
    
    # Print summary of additional files created (unless streaming to stdout)
    if not args.return_output:
        # Check for additional files
        result_files = []
        for root, dirs, files in os.walk(output_dir):
            for file in files:
                if file != output_file:
                    rel_path = os.path.relpath(os.path.join(root, file), output_dir)
                    result_files.append(rel_path)
        
        if result_files:
            print(f"Files created: {', '.join(result_files)}", file=sys.stderr)
    
    return return_code

def main():
    """Main entry point"""
    # Check for simple mode first
    if len(sys.argv) > 1 and sys.argv[1] == "--simple":
        handle_simple_mode()
        return
    
    # Check if --simple appears anywhere else
    if "--simple" in sys.argv[1:]:
        print("Error: --simple must be the first argument for passthrough mode", file=sys.stderr)
        sys.exit(1)
    
    args = parse_arguments()
    
    # Read prompt
    prompt, system_prompt = read_prompt(args)
    if args.verbose and not args.return_output:
        print(f"Prompt: {prompt[:100]}{'...' if len(prompt) > 100 else ''}", file=sys.stderr)
    
    # Setup output
    output_dir, output_file = get_output_directory(args)
    
    # Build command
    cmd = build_claude_command(prompt, args)
    
    # Run Claude (this creates the directory and saves system prompt)
    exit_code = run_claude(cmd, prompt, system_prompt, output_dir, output_file, args)
    
    sys.exit(exit_code)

if __name__ == "__main__":
    main()